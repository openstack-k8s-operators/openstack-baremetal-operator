/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Generated by:
//
// operator-sdk create webhook --group baremetal --version v1beta1 --kind OpenStackProvisionServer --programmatic-validation --defaulting
//

package v1beta1

import (
	"context"
	"fmt"

	"github.com/go-playground/validator/v10"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/util/validation/field"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

var openstackProvisionServerDefaults OpenStackProvisionServerDefaults

// log is for logging in this package.
var openstackprovisionserverlog = logf.Log.WithName("openstackprovisionserver-resource")

// SetupOpenStackProvisionServerDefaults - initialize OpenStackProvisionServer spec defaults for use with either internal or external webhooks
func SetupOpenStackProvisionServerDefaults(defaults OpenStackProvisionServerDefaults) {
	openstackProvisionServerDefaults = defaults
	openstackprovisionserverlog.Info("OpenStackProvisionServer defaults initialized", "defaults", defaults)
}

// SetupWebhookWithManager - register this webhook with the controller manager
func (r *OpenStackProvisionServer) SetupWebhookWithManager(mgr ctrl.Manager) error {
	if webhookClient == nil {
		webhookClient = mgr.GetClient()
	}

	return ctrl.NewWebhookManagedBy(mgr).
		WithValidator(OpenStackProvisionServerCustomValidator).
		WithDefaulter(OpenStackProvisionServerCustomDefaulter).
		For(r).
		Complete()
}

//+kubebuilder:webhook:path=/validate-baremetal-openstack-org-v1beta1-openstackprovisionserver,mutating=false,failurePolicy=fail,sideEffects=None,groups=baremetal.openstack.org,resources=openstackprovisionservers,verbs=create;update,versions=v1beta1,name=vopenstackprovisionserver.kb.io,admissionReviewVersions=v1

var OpenStackProvisionServerCustomValidator webhook.CustomValidator = &OpenStackProvisionServer{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *OpenStackProvisionServer) ValidateCreate(ctx context.Context, obj runtime.Object) (admission.Warnings, error) {
	provServer := obj.(*OpenStackProvisionServer)
	openstackprovisionserverlog.Info("validate create", "name", provServer.Name)
	var errors field.ErrorList
	// Check if OpenStackProvisionServer name matches RFC1123 for use in labels
	validate := validator.New()
	if err := validate.Var(provServer.Name, "hostname_rfc1123"); err != nil {
		openstackprovisionserverlog.Error(err, "Error validating OpenStackProvisionServer name, name must follow RFC1123")
		errors = append(errors, field.Invalid(
			field.NewPath("Name"),
			provServer.Name,
			fmt.Sprintf("Error validating OpenStackProvisionServer name %s, name must follow RFC1123", provServer.Name)))
	}

	return nil, r.validateCr(provServer)
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *OpenStackProvisionServer) ValidateUpdate(ctx context.Context, old runtime.Object, new runtime.Object) (admission.Warnings, error) {
	openstackprovisionserverlog.Info("validate update", "name", old.(*OpenStackProvisionServer).Name)

	return nil, r.validateCr(new.(*OpenStackProvisionServer))
}

func (r *OpenStackProvisionServer) validateCr(instance *OpenStackProvisionServer) error {
	// TODO: Create a specific context here instead of passing TODO()?
	existingPorts, err := GetExistingProvServerPorts(context.TODO(), webhookClient, instance)
	if err != nil {
		return err
	}

	for name, port := range existingPorts {
		namespacedName := types.NamespacedName{Namespace: instance.Namespace, Name: instance.Name}
		if port == instance.Spec.Port && name != namespacedName.String() {
			return fmt.Errorf("port %d is already in use by another OpenStackProvisionServer: %s", port, name)
		}
	}

	return nil
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *OpenStackProvisionServer) ValidateDelete(ctx context.Context, obj runtime.Object) (admission.Warnings, error) {
	openstackprovisionserverlog.Info("validate delete", "name", obj.(*OpenStackProvisionServer).Name)

	return nil, nil
}

//+kubebuilder:webhook:path=/mutate-baremetal-openstack-org-v1beta1-openstackprovisionserver,mutating=true,failurePolicy=fail,sideEffects=None,groups=baremetal.openstack.org,resources=openstackprovisionservers,verbs=create;update,versions=v1beta1,name=mopenstackprovisionserver.kb.io,admissionReviewVersions=v1

var OpenStackProvisionServerCustomDefaulter webhook.CustomDefaulter = &OpenStackProvisionServer{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *OpenStackProvisionServer) Default(ctx context.Context, obj runtime.Object) error {
	openstackprovisionserverlog.Info("default", "name", obj.(*OpenStackProvisionServer).Name)
	var err error
	instance := obj.(*OpenStackProvisionServer)
	if instance.Spec.OSContainerImageURL == "" {
		instance.Spec.OSContainerImageURL = openstackProvisionServerDefaults.OSContainerImageURL
	}
	if instance.Spec.AgentImageURL == "" {
		instance.Spec.AgentImageURL = openstackProvisionServerDefaults.AgentImageURL
	}
	if instance.Spec.ApacheImageURL == "" {
		instance.Spec.ApacheImageURL = openstackProvisionServerDefaults.ApacheImageURL
	}
	if instance.Spec.OSImage == "" {
		instance.Spec.OSImage = openstackProvisionServerDefaults.OSImage
	}
	if instance.Spec.Port == 0 {
		err = AssignProvisionServerPort(context.TODO(), webhookClient, obj.(*OpenStackProvisionServer),
			ProvisionServerPortStart, ProvisionServerPortEnd)
		if err != nil {
			// If this occurs, it will also be caught just after this defaulting webhook in the
			// validating webhook, because that webhook calls the same underlying function that
			// checks for the availability of ports.  That will cause the create/update of the
			// CR to fail and halt moving forward.
			openstackprovisionserverlog.Error(err, "Cannot assign port for OpenStackProvisionServer", "OpenStackProvisionServer",
				obj.(*OpenStackProvisionServer))
		}
	}
	return err
}
